name: Deploy
on:
  push:
    tags:
      - 'v*'

env:
  APP_NAME: "notes"
  APP_VERSION: ${{ github.ref_name }}

jobs:
  test:
    name: Tests
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: |
          go test -v -timeout 10m -race -covermode atomic -coverprofile=coverage.out -coverpkg=github.com/xsqrty/notes/... ./...
          echo Total coverage $(go tool cover -func=coverage.out | tail -n 1 | awk '{print $3}')
  build:
    needs: test
    name: Build and push to registry
    runs-on: ubuntu-22.04
    environment: production
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to repo
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ vars.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ vars.REGISTRY }}/${{ env.APP_NAME }}:latest
            ${{ vars.REGISTRY }}/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
          build-args: |
            VERSION=${{ env.APP_VERSION }}
            APP_NAME=${{ env.APP_NAME }}
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-22.04
    environment: production
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Copy files via SSH
        uses: appleboy/scp-action@v1
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          source: "docker-compose.yml,migrations"
          target: "/home/${{ vars.SERVER_USER }}/${{ env.APP_NAME }}"

      - name: Pull and restart containers
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            docker login ${{ vars.REGISTRY }} -u ${{ vars.REGISTRY_USER }} -p ${{ secrets.REGISTRY_PASS }}
            docker pull ${{ vars.REGISTRY }}/${{ env.APP_NAME }}:latest
            docker compose -f /home/${{ vars.SERVER_USER }}/${{ env.APP_NAME }}/docker-compose.yml up -d

  healthcheck:
    needs: deploy
    name: Healthcheck
    runs-on: ubuntu-22.04
    environment: production
    steps:
      - name: Check version
        run: |
          version=$(curl -s ${{ vars.HEALTHCHECK_ENDPOINT }} | jq -r '.version')
          if [ "$version" != "${{ github.ref_name }}" ]; then
            echo "Expected version ${{ github.ref_name }}, got $version"
            exit 1
          else
            echo "Success: $version"
          fi