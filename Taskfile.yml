# https://taskfile.dev

version: '3'

vars:
  APP_NAME: notes
  PACKAGE: github.com/xsqrty/notes
  BIN_DIR: bin
  ENTRY: cmd/notes/main.go
  REST_ENTRY: internal/api/rest/rest.go
  DEPS_DIR: "{{.USER_WORKING_DIR}}/{{.BIN_DIR}}/deps"
  MIGRATIONS_DIR: "{{.USER_WORKING_DIR}}/migrations"
  MIGRATE_BIN: "{{.DEPS_DIR}}/migrate"
  SWAG_BIN: "{{.DEPS_DIR}}/swag"
  MOCKERY_BIN: "{{.DEPS_DIR}}/mockery"
  LINTER_BIN: "{{.DEPS_DIR}}/golangci-lint"
  APP_BIN: "{{.BIN_DIR}}/{{.APP_NAME}}"
  DSN: $DSN

tasks:
  test:
    desc: Run tests (unit, integration)
    silent: true
    cmds:
      - go clean -cache
      - go test -v -timeout 10m -race -covermode atomic -coverprofile=coverage.out -coverpkg=github.com/xsqrty/notes/... ./...
      - echo Total coverage $(go tool cover -func=coverage.out | tail -n 1 | awk '{print $3}')
  lint:
    desc: Run golangci-lint
    silent: true
    cmds:
      - "{{.LINTER_BIN}} run"
  lint:fmt:
    desc: Run golangci-lint fmt (files formatter)
    silent: true
    cmds:
      - "{{.LINTER_BIN}} fmt"
  mock:generate:
    desc: Generate (re-generate) mock files
    silent: true
    cmds:
      - "{{.MOCKERY_BIN}}"
  swag:fmt:
    desc: Run swagger formatter for comments
    silent: true
    cmds:
      - "{{.SWAG_BIN}} fmt"
  swag:generate:
    desc: Generate swagger documentations
    silent: true
    cmds:
      - "{{.SWAG_BIN}} init -g {{.REST_ENTRY}}"
  migrate:up:
    desc: Run migrations
    silent: true
    cmds:
      - "{{.MIGRATE_BIN}} -path {{.MIGRATIONS_DIR}} -database {{.DSN}} up"
  migrate:down:
    desc: Downgrade migration level by 1 step
    silent: true
    cmds:
      - "{{.MIGRATE_BIN}} -path {{.MIGRATIONS_DIR}} -database {{.DSN}} down 1"
  migrate:version:
    desc: Check migration version
    silent: true
    cmds:
      - "{{.MIGRATE_BIN}} -path {{.MIGRATIONS_DIR}} -database {{.DSN}} version"
  migrate:create:*:
    desc: Create migration (* - migration name)
    vars:
      NAME: "{{index .MATCH 0}}"
    silent: true
    cmds:
      - echo "Create migration {{ .NAME }} in {{.MIGRATIONS_DIR}}"
      - "{{.MIGRATE_BIN}} create -dir {{.MIGRATIONS_DIR}} -ext sql {{.NAME}}"
  install:
    desc: Install project dependencies
    silent: true
    cmds:
      - GOBIN={{.DEPS_DIR}} go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.18.3
      - GOBIN={{.DEPS_DIR}} go install github.com/swaggo/swag/cmd/swag@v1.16.4
      - GOBIN={{.DEPS_DIR}} go install github.com/vektra/mockery/v3@v3.4.0
      - GOBIN={{.DEPS_DIR}} go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.2.2
  build:dev:
    desc: Build application with dev version (can check with a flag --version)
    silent: true
    cmds:
      - task build:0.0.0-dev
  build:*:
    desc: Build application with concrete version (* - application version)
    vars:
      VERSION: "{{index .MATCH 0}}"
    silent: true
    cmds:
      - echo "Build {{.APP_NAME}}@{{.VERSION}}"
      - go build -o {{.APP_BIN}} -ldflags "-X '{{.PACKAGE}}/internal/config.Version={{.VERSION}}' -X '{{.PACKAGE}}/internal/config.AppName={{.APP_NAME}}'" {{.ENTRY}}
  run:
    silent: true
    cmds:
      - go run {{.ENTRY}}