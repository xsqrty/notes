// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_role

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/xsqrty/notes/internal/domain/role"
	"github.com/xsqrty/notes/internal/domain/user"
)

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// AttachUserRolesByLabel provides a mock function for the type Repository
func (_mock *Repository) AttachUserRolesByLabel(ctx context.Context, label role.Label, user1 *user.User) error {
	ret := _mock.Called(ctx, label, user1)

	if len(ret) == 0 {
		panic("no return value specified for AttachUserRolesByLabel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, role.Label, *user.User) error); ok {
		r0 = returnFunc(ctx, label, user1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Repository_AttachUserRolesByLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachUserRolesByLabel'
type Repository_AttachUserRolesByLabel_Call struct {
	*mock.Call
}

// AttachUserRolesByLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - label role.Label
//   - user1 *user.User
func (_e *Repository_Expecter) AttachUserRolesByLabel(ctx interface{}, label interface{}, user1 interface{}) *Repository_AttachUserRolesByLabel_Call {
	return &Repository_AttachUserRolesByLabel_Call{Call: _e.mock.On("AttachUserRolesByLabel", ctx, label, user1)}
}

func (_c *Repository_AttachUserRolesByLabel_Call) Run(run func(ctx context.Context, label role.Label, user1 *user.User)) *Repository_AttachUserRolesByLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 role.Label
		if args[1] != nil {
			arg1 = args[1].(role.Label)
		}
		var arg2 *user.User
		if args[2] != nil {
			arg2 = args[2].(*user.User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Repository_AttachUserRolesByLabel_Call) Return(err error) *Repository_AttachUserRolesByLabel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_AttachUserRolesByLabel_Call) RunAndReturn(run func(ctx context.Context, label role.Label, user1 *user.User) error) *Repository_AttachUserRolesByLabel_Call {
	_c.Call.Return(run)
	return _c
}

// HasPermissions provides a mock function for the type Repository
func (_mock *Repository) HasPermissions(ctx context.Context, permissions []role.Permission, user1 *user.User) (bool, error) {
	ret := _mock.Called(ctx, permissions, user1)

	if len(ret) == 0 {
		panic("no return value specified for HasPermissions")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []role.Permission, *user.User) (bool, error)); ok {
		return returnFunc(ctx, permissions, user1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []role.Permission, *user.User) bool); ok {
		r0 = returnFunc(ctx, permissions, user1)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []role.Permission, *user.User) error); ok {
		r1 = returnFunc(ctx, permissions, user1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_HasPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPermissions'
type Repository_HasPermissions_Call struct {
	*mock.Call
}

// HasPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - permissions []role.Permission
//   - user1 *user.User
func (_e *Repository_Expecter) HasPermissions(ctx interface{}, permissions interface{}, user1 interface{}) *Repository_HasPermissions_Call {
	return &Repository_HasPermissions_Call{Call: _e.mock.On("HasPermissions", ctx, permissions, user1)}
}

func (_c *Repository_HasPermissions_Call) Run(run func(ctx context.Context, permissions []role.Permission, user1 *user.User)) *Repository_HasPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []role.Permission
		if args[1] != nil {
			arg1 = args[1].([]role.Permission)
		}
		var arg2 *user.User
		if args[2] != nil {
			arg2 = args[2].(*user.User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Repository_HasPermissions_Call) Return(b bool, err error) *Repository_HasPermissions_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *Repository_HasPermissions_Call) RunAndReturn(run func(ctx context.Context, permissions []role.Permission, user1 *user.User) (bool, error)) *Repository_HasPermissions_Call {
	_c.Call.Return(run)
	return _c
}
