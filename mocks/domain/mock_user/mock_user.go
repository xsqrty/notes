// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_user

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	"github.com/xsqrty/notes/internal/domain/user"
)

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// EmailExists provides a mock function for the type Repository
func (_mock *Repository) EmailExists(ctx context.Context, email string) (bool, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for EmailExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_EmailExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmailExists'
type Repository_EmailExists_Call struct {
	*mock.Call
}

// EmailExists is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Repository_Expecter) EmailExists(ctx interface{}, email interface{}) *Repository_EmailExists_Call {
	return &Repository_EmailExists_Call{Call: _e.mock.On("EmailExists", ctx, email)}
}

func (_c *Repository_EmailExists_Call) Run(run func(ctx context.Context, email string)) *Repository_EmailExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_EmailExists_Call) Return(b bool, err error) *Repository_EmailExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *Repository_EmailExists_Call) RunAndReturn(run func(ctx context.Context, email string) (bool, error)) *Repository_EmailExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type Repository
func (_mock *Repository) GetByEmail(ctx context.Context, email string) (*user.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type Repository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Repository_Expecter) GetByEmail(ctx interface{}, email interface{}) *Repository_GetByEmail_Call {
	return &Repository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *Repository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *Repository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_GetByEmail_Call) Return(user1 *user.User, err error) *Repository_GetByEmail_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *Repository_GetByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*user.User, error)) *Repository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type Repository
func (_mock *Repository) GetByID(ctx context.Context, id uuid.UUID) (*user.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*user.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *user.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Repository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Repository_Expecter) GetByID(ctx interface{}, id interface{}) *Repository_GetByID_Call {
	return &Repository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *Repository_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Repository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_GetByID_Call) Return(user1 *user.User, err error) *Repository_GetByID_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *Repository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*user.User, error)) *Repository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type Repository
func (_mock *Repository) Save(ctx context.Context, u *user.User) error {
	ret := _mock.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = returnFunc(ctx, u)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Repository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Repository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - u *user.User
func (_e *Repository_Expecter) Save(ctx interface{}, u interface{}) *Repository_Save_Call {
	return &Repository_Save_Call{Call: _e.mock.On("Save", ctx, u)}
}

func (_c *Repository_Save_Call) Run(run func(ctx context.Context, u *user.User)) *Repository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *user.User
		if args[1] != nil {
			arg1 = args[1].(*user.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_Save_Call) Return(err error) *Repository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_Save_Call) RunAndReturn(run func(ctx context.Context, u *user.User) error) *Repository_Save_Call {
	_c.Call.Return(run)
	return _c
}
