// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_middleware

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
	"github.com/xsqrty/notes/internal/domain/user"
)

// NewJWTAuthentication creates a new instance of JWTAuthentication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTAuthentication(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTAuthentication {
	mock := &JWTAuthentication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// JWTAuthentication is an autogenerated mock type for the JWTAuthentication type
type JWTAuthentication struct {
	mock.Mock
}

type JWTAuthentication_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTAuthentication) EXPECT() *JWTAuthentication_Expecter {
	return &JWTAuthentication_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type JWTAuthentication
func (_mock *JWTAuthentication) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// JWTAuthentication_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type JWTAuthentication_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *JWTAuthentication_Expecter) Close() *JWTAuthentication_Close_Call {
	return &JWTAuthentication_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *JWTAuthentication_Close_Call) Run(run func()) *JWTAuthentication_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JWTAuthentication_Close_Call) Return(err error) *JWTAuthentication_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *JWTAuthentication_Close_Call) RunAndReturn(run func() error) *JWTAuthentication_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessToken provides a mock function for the type JWTAuthentication
func (_mock *JWTAuthentication) CreateAccessToken(user1 *user.User) (string, error) {
	ret := _mock.Called(user1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*user.User) (string, error)); ok {
		return returnFunc(user1)
	}
	if returnFunc, ok := ret.Get(0).(func(*user.User) string); ok {
		r0 = returnFunc(user1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = returnFunc(user1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JWTAuthentication_CreateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessToken'
type JWTAuthentication_CreateAccessToken_Call struct {
	*mock.Call
}

// CreateAccessToken is a helper method to define mock.On call
//   - user1 *user.User
func (_e *JWTAuthentication_Expecter) CreateAccessToken(user1 interface{}) *JWTAuthentication_CreateAccessToken_Call {
	return &JWTAuthentication_CreateAccessToken_Call{Call: _e.mock.On("CreateAccessToken", user1)}
}

func (_c *JWTAuthentication_CreateAccessToken_Call) Run(run func(user1 *user.User)) *JWTAuthentication_CreateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *user.User
		if args[0] != nil {
			arg0 = args[0].(*user.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JWTAuthentication_CreateAccessToken_Call) Return(s string, err error) *JWTAuthentication_CreateAccessToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *JWTAuthentication_CreateAccessToken_Call) RunAndReturn(run func(user1 *user.User) (string, error)) *JWTAuthentication_CreateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefreshToken provides a mock function for the type JWTAuthentication
func (_mock *JWTAuthentication) CreateRefreshToken(user1 *user.User) (string, error) {
	ret := _mock.Called(user1)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*user.User) (string, error)); ok {
		return returnFunc(user1)
	}
	if returnFunc, ok := ret.Get(0).(func(*user.User) string); ok {
		r0 = returnFunc(user1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = returnFunc(user1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JWTAuthentication_CreateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefreshToken'
type JWTAuthentication_CreateRefreshToken_Call struct {
	*mock.Call
}

// CreateRefreshToken is a helper method to define mock.On call
//   - user1 *user.User
func (_e *JWTAuthentication_Expecter) CreateRefreshToken(user1 interface{}) *JWTAuthentication_CreateRefreshToken_Call {
	return &JWTAuthentication_CreateRefreshToken_Call{Call: _e.mock.On("CreateRefreshToken", user1)}
}

func (_c *JWTAuthentication_CreateRefreshToken_Call) Run(run func(user1 *user.User)) *JWTAuthentication_CreateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *user.User
		if args[0] != nil {
			arg0 = args[0].(*user.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JWTAuthentication_CreateRefreshToken_Call) Return(s string, err error) *JWTAuthentication_CreateRefreshToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *JWTAuthentication_CreateRefreshToken_Call) RunAndReturn(run func(user1 *user.User) (string, error)) *JWTAuthentication_CreateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type JWTAuthentication
func (_mock *JWTAuthentication) GetUser(r *http.Request) (*user.User, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (*user.User, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) *user.User); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JWTAuthentication_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type JWTAuthentication_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - r *http.Request
func (_e *JWTAuthentication_Expecter) GetUser(r interface{}) *JWTAuthentication_GetUser_Call {
	return &JWTAuthentication_GetUser_Call{Call: _e.mock.On("GetUser", r)}
}

func (_c *JWTAuthentication_GetUser_Call) Run(run func(r *http.Request)) *JWTAuthentication_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Request
		if args[0] != nil {
			arg0 = args[0].(*http.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JWTAuthentication_GetUser_Call) Return(user1 *user.User, err error) *JWTAuthentication_GetUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *JWTAuthentication_GetUser_Call) RunAndReturn(run func(r *http.Request) (*user.User, error)) *JWTAuthentication_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function for the type JWTAuthentication
func (_mock *JWTAuthentication) Verify(next http.Handler) http.Handler {
	ret := _mock.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 http.Handler
	if returnFunc, ok := ret.Get(0).(func(http.Handler) http.Handler); ok {
		r0 = returnFunc(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}
	return r0
}

// JWTAuthentication_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type JWTAuthentication_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - next http.Handler
func (_e *JWTAuthentication_Expecter) Verify(next interface{}) *JWTAuthentication_Verify_Call {
	return &JWTAuthentication_Verify_Call{Call: _e.mock.On("Verify", next)}
}

func (_c *JWTAuthentication_Verify_Call) Run(run func(next http.Handler)) *JWTAuthentication_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.Handler
		if args[0] != nil {
			arg0 = args[0].(http.Handler)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JWTAuthentication_Verify_Call) Return(handler http.Handler) *JWTAuthentication_Verify_Call {
	_c.Call.Return(handler)
	return _c
}

func (_c *JWTAuthentication_Verify_Call) RunAndReturn(run func(next http.Handler) http.Handler) *JWTAuthentication_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyRefresh provides a mock function for the type JWTAuthentication
func (_mock *JWTAuthentication) VerifyRefresh(next http.Handler) http.Handler {
	ret := _mock.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for VerifyRefresh")
	}

	var r0 http.Handler
	if returnFunc, ok := ret.Get(0).(func(http.Handler) http.Handler); ok {
		r0 = returnFunc(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}
	return r0
}

// JWTAuthentication_VerifyRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyRefresh'
type JWTAuthentication_VerifyRefresh_Call struct {
	*mock.Call
}

// VerifyRefresh is a helper method to define mock.On call
//   - next http.Handler
func (_e *JWTAuthentication_Expecter) VerifyRefresh(next interface{}) *JWTAuthentication_VerifyRefresh_Call {
	return &JWTAuthentication_VerifyRefresh_Call{Call: _e.mock.On("VerifyRefresh", next)}
}

func (_c *JWTAuthentication_VerifyRefresh_Call) Run(run func(next http.Handler)) *JWTAuthentication_VerifyRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.Handler
		if args[0] != nil {
			arg0 = args[0].(http.Handler)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JWTAuthentication_VerifyRefresh_Call) Return(handler http.Handler) *JWTAuthentication_VerifyRefresh_Call {
	_c.Call.Return(handler)
	return _c
}

func (_c *JWTAuthentication_VerifyRefresh_Call) RunAndReturn(run func(next http.Handler) http.Handler) *JWTAuthentication_VerifyRefresh_Call {
	_c.Call.Return(run)
	return _c
}
